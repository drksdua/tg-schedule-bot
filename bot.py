import os, json
from aiogram import Bot, Dispatcher, types, executor
from dotenv import load_dotenv

# ========= –±–∞–∑–æ–≤—ñ =========
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise RuntimeError("–£ .env –Ω–µ–º–∞ BOT_TOKEN")

DEFAULT_GROUP = "CS-101"   # –∫–æ–º–∞–Ω–¥–∞ /group —î, –∞–ª–µ –Ω–µ —Å–≤—ñ—Ç–∏–º–æ —ó—ó —É —Ç–µ–∫—Å—Ç–∞—Ö

bot = Bot(BOT_TOKEN, parse_mode="HTML")
dp = Dispatcher(bot)

# ========= –¥–∞–Ω—ñ =========
with open("schedule.json", "r", encoding="utf-8") as f:
    DATA = json.load(f)
SCHED = DATA["groups"]

# –í–∏–±—ñ—Ä —Ç–∏–∂–Ω—è —Ç–∞ –æ—Å—Ç–∞–Ω–Ω—ñ–π –æ–±—Ä–∞–Ω–∏–π –¥–µ–Ω—å –Ω–∞ —á–∞—Ç
WEEK_KIND = {}   # {chat_id: "lecture" | "practical"}
LAST_DAY  = {}   # {chat_id: 1..7}

DAY_NAMES = {
    1: "–ü–æ–Ω–µ–¥—ñ–ª–æ–∫", 2: "–í—ñ–≤—Ç–æ—Ä–æ–∫", 3: "–°–µ—Ä–µ–¥–∞",
    4: "–ß–µ—Ç–≤–µ—Ä", 5: "–ü‚Äô—è—Ç–Ω–∏—Ü—è", 6: "–°—É–±–æ—Ç–∞", 7: "–ù–µ–¥—ñ–ª—è"
}

# --- —Ä–æ–∑–∫–ª–∞–¥ –¥–∑–≤—ñ–Ω–∫—ñ–≤ (1 –∫—É—Ä—Å –º–∞–≥—ñ—Å—Ç—Ä–∞—Ç—É—Ä–∏) ---
BELLS_M1 = [
    ("1Ô∏è‚É£ –ø–∞—Ä–∞", "09:00‚Äì10:20"),
    ("2Ô∏è‚É£ –ø–∞—Ä–∞", "10:30‚Äì11:50"),
    ("3Ô∏è‚É£ –ø–∞—Ä–∞", "12:20‚Äì13:40"),
    ("4Ô∏è‚É£ –ø–∞—Ä–∞", "13:50‚Äì15:10"),
    ("5Ô∏è‚É£ –ø–∞—Ä–∞", "15:20‚Äì16:40"),
    ("6Ô∏è‚É£ –ø–∞—Ä–∞", "16:50‚Äì18:10"),
]

def bells_text(bells):
    parts = ["üîî <b>–†–æ–∑–∫–ª–∞–¥ –¥–∑–≤—ñ–Ω–∫—ñ–≤</b> <i>(–º–∞–≥—ñ—Å—Ç—Ä–∞—Ç—É—Ä–∞ ‚Äî 1 –∫—É—Ä—Å)</i>", ""]
    for i, (name, time) in enumerate(bells, 1):
        parts.append(f"{name}: ‚è∞ <b>{time}</b>")
        if i != len(bells):
            parts.append("¬∑ ¬∑ ¬∑")
    return "\n".join(parts)

# ===== helpers (–≥–∞—Ä–Ω–µ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è) =====
def lessons_for(group: str, day: int, kind: str):
    return SCHED.get(group, {}).get(kind, {}).get(str(day), [])

def header(day_title: str, kind: str) -> str:
    nice = "–õ–µ–∫—Ü—ñ–π–Ω–∏–π" if kind == "lecture" else "–ü—Ä–∞–∫—Ç–∏—á–Ω–∏–π"
    return f"üóìÔ∏è <b>{day_title}</b>\nüè∑Ô∏è <i>{nice} —Ç–∏–∂–¥–µ–Ω—å</i>"

def format_summary(lessons, day_title: str, kind: str) -> str:
    head = header(day_title, kind)
    if not lessons:
        return f"{head}\n\n–ü–∞—Ä –Ω–µ–º–∞—î üéâ"
    lines = [head, ""]
    for l in lessons:
        lines.append(f"‚è∞ <b>{l['start']}-{l['end']}</b> ‚Äî üìò {l['title']}")
    return "\n".join(lines)

def format_details(lessons, day_title: str, kind: str) -> str:
    head = header(day_title, kind)
    if not lessons:
        return f"{head}\n\n–ü–∞—Ä –Ω–µ–º–∞—î üéâ"
    parts = [head, ""]
    for idx, l in enumerate(lessons, start=1):
        teacher = l.get("teacher", "‚Äî")
        room = l.get("room", "‚Äî")
        parts += [
            f"üìö <b>–ü–∞—Ä–∞ {idx}</b>",
            f"   ‚è∞ <b>{l['start']}-{l['end']}</b>",
            f"   üìò <b>{l['title']}</b>",
            f"   üë§ <i>{teacher}</i>",
            f"   üè´ {room}",
        ]
        if idx != len(lessons):
            parts.append("‚Äî" * 20)
    return "\n".join(parts)

def lecture_placeholder_text() -> str:
    return ("üòÖ <b>–£–ø—Å‚Ä¶</b>\n"
            "–†–æ–∑–∫–ª–∞–¥—É <b>–ª–µ–∫—Ü—ñ–π–Ω–æ–≥–æ</b> —Ç–∏–∂–Ω—è –ø–æ–∫–∏ –Ω–µ–º–∞—î ‚Äî –æ—á—ñ–∫—É–π—Ç–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è üôè")

# ========= –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ =========
def kb_start():
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton("‚ñ∂Ô∏è –ü–æ—á–∞—Ç–∏", callback_data="begin"))
    return kb

def kb_main_menu():
    kb = types.InlineKeyboardMarkup(row_width=2)
    kb.add(
        types.InlineKeyboardButton("üìö –õ–µ–∫—Ü—ñ–π–Ω–∏–π", callback_data="set_kind:lecture"),
        types.InlineKeyboardButton("üß™ –ü—Ä–∞–∫—Ç–∏—á–Ω–∏–π", callback_data="set_kind:practical"),
    )
    kb.add(types.InlineKeyboardButton("üîî –†–æ–∑–∫–ª–∞–¥ –¥–∑–≤—ñ–Ω–∫—ñ–≤", callback_data="bells_m1"))
    return kb

def kb_days():
    kb = types.InlineKeyboardMarkup(row_width=3)
    day_emoji = {1:"üå§Ô∏è", 2:"üå§Ô∏è", 3:"üå§Ô∏è", 4:"üå§Ô∏è", 5:"üéâ"}
    buttons = [types.InlineKeyboardButton(f"{day_emoji.get(i,'')} {DAY_NAMES[i]}", callback_data=f"day:{i}") for i in range(1, 6)]
    kb.add(*buttons)
    kb.add(types.InlineKeyboardButton("üè† –£ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="to_menu"))
    return kb

def kb_day_summary():
    kb = types.InlineKeyboardMarkup(row_width=2)
    kb.add(
        types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –¥–Ω—ñ–≤", callback_data="back_days"),
        types.InlineKeyboardButton("‚ÑπÔ∏è –î–µ—Ç–∞–ª—å–Ω—ñ—à–µ", callback_data="details"),
    )
    return kb

def kb_day_details():
    kb = types.InlineKeyboardMarkup(row_width=1)
    kb.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –¥–Ω—ñ–≤", callback_data="back_days"))
    return kb

def kb_lecture_placeholder():
    kb = types.InlineKeyboardMarkup(row_width=2)
    kb.add(
        types.InlineKeyboardButton("üß™ –ü–µ—Ä–µ–π—Ç–∏ –¥–æ –ø—Ä–∞–∫—Ç–∏—á–Ω–æ–≥–æ", callback_data="set_kind:practical"),
        types.InlineKeyboardButton("üè† –£ –º–µ–Ω—é", callback_data="to_menu")
    )
    return kb

# ========= —Ö–µ–Ω–¥–ª–µ—Ä–∏ =========
@dp.message_handler(commands=["start"])
async def start_cmd(m: types.Message):
    await m.answer("–ü—Ä–∏–≤—ñ—Ç! üëã –ù–∞—Ç–∏—Å–Ω–∏, —â–æ–± –ø–æ—á–∞—Ç–∏:", reply_markup=kb_start())

@dp.message_handler(commands=["help"])
async def help_cmd(m: types.Message):
    await m.answer("–ù–∞—Ç–∏—Å–Ω–∏ ¬´–ü–æ—á–∞—Ç–∏¬ª, –æ–±–µ—Ä–∏ —Ç–∏–ø —Ç–∏–∂–Ω—è —ñ –¥–µ–Ω—å.", reply_markup=kb_start())

@dp.message_handler(commands=["group"])
async def cmd_group(m: types.Message):
    global DEFAULT_GROUP
    parts = m.text.split(maxsplit=1)
    if len(parts) != 2:
        await m.answer("–ü—Ä–∏–∫–ª–∞–¥: <code>/group CS-101</code>")
        return
    new_group = parts[1].strip()
    if new_group in SCHED:
        DEFAULT_GROUP = new_group
        await m.answer(f"–ì—Ä—É–ø—É –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ <b>{DEFAULT_GROUP}</b>.", reply_markup=kb_main_menu())
    else:
        await m.answer("–¢–∞–∫–æ—ó –≥—Ä—É–ø–∏ –Ω–µ–º–∞. –î–æ—Å—Ç—É–ø–Ω—ñ: " + ", ".join(SCHED.keys()))

# --- –Ω–∞–≤—ñ–≥–∞—Ü—ñ—è
@dp.callback_query_handler(lambda c: c.data == "begin")
async def begin(c: types.CallbackQuery):
    await c.message.edit_text("–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø —Ç–∏–∂–Ω—è:", reply_markup=kb_main_menu())
    await c.answer()

@dp.callback_query_handler(lambda c: c.data == "to_menu")
async def to_menu(c: types.CallbackQuery):
    await c.message.edit_text("–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø —Ç–∏–∂–Ω—è:", reply_markup=kb_main_menu())
    await c.answer()

@dp.callback_query_handler(lambda c: c.data == "bells_m1")
async def show_bells(c: types.CallbackQuery):
    await c.message.edit_text(
        bells_text(BELLS_M1),
        reply_markup=types.InlineKeyboardMarkup().add(
            types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ —É –º–µ–Ω—é", callback_data="to_menu")
        )
    )
    await c.answer("–î–∑–≤—ñ–Ω–∫–∏ –≤—ñ–¥–∫—Ä–∏—Ç–æ")

@dp.callback_query_handler(lambda c: c.data.startswith("set_kind:"))
async def set_kind(c: types.CallbackQuery):
    kind = c.data.split(":")[1]  # lecture | practical
    WEEK_KIND[c.message.chat.id] = kind

    if kind == "lecture":
        # –ö–û–°–¢–ò–õ–¨: –ø–æ–∫–∞–∑–∞—Ç–∏ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä –∑–∞–º—ñ—Å—Ç—å –ø–µ—Ä–µ—Ö–æ–¥—É –¥–æ –≤–∏–±–æ—Ä—É –¥–Ω—è
        await c.message.edit_text(lecture_placeholder_text(), reply_markup=kb_lecture_placeholder())
        await c.answer("–†–æ–∑–∫–ª–∞–¥ –ª–µ–∫—Ü—ñ–π–Ω–æ–≥–æ —Ç–∏–∂–Ω—è —â–µ –Ω–µ –¥–æ–¥–∞–Ω–æ")
        return

    # practical ‚Äî —è–∫ –∑–∞–≤–∂–¥–∏
    await c.message.edit_text("–û–±—Ä–∞–Ω–æ: <b>–ü—Ä–∞–∫—Ç–∏—á–Ω–∏–π</b> —Ç–∏–∂–¥–µ–Ω—å.\n–û–±–µ—Ä—ñ—Ç—å –¥–µ–Ω—å:", reply_markup=kb_days())
    await c.answer()

@dp.callback_query_handler(lambda c: c.data == "back_days")
async def back_days(c: types.CallbackQuery):
    await c.message.edit_text("–û–±–µ—Ä—ñ—Ç—å –¥–µ–Ω—å (–ü–Ω‚Äì–ü—Ç):", reply_markup=kb_days())
    await c.answer()

@dp.callback_query_handler(lambda c: c.data.startswith("day:"))
async def day_pick(c: types.CallbackQuery):
    day = int(c.data.split(":")[1])
    LAST_DAY[c.message.chat.id] = day
    kind = WEEK_KIND.get(c.message.chat.id)

    # –Ø–∫—â–æ —á–æ–º—É—Å—å –æ–±—Ä–∞–Ω–∏–π lecture ‚Äî –¥—É–±–ª—é—î–º–æ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä
    if kind == "lecture":
        await c.message.edit_text(lecture_placeholder_text(), reply_markup=kb_lecture_placeholder())
        await c.answer()
        return

    if not kind:
        await c.message.edit_text("–°–ø–µ—Ä—à—É –æ–±–µ—Ä—ñ—Ç—å —Ç–∏–ø —Ç–∏–∂–Ω—è:", reply_markup=kb_main_menu())
        await c.answer()
        return

    lessons = lessons_for(DEFAULT_GROUP, day, kind)
    text = format_summary(lessons, f"{DAY_NAMES[day]}", kind)
    await c.message.edit_text(text, reply_markup=kb_day_summary())
    await c.answer()

@dp.callback_query_handler(lambda c: c.data == "details")
async def show_details(c: types.CallbackQuery):
    kind = WEEK_KIND.get(c.message.chat.id)
    day  = LAST_DAY.get(c.message.chat.id)

    # –Ω–∞ –≤—Å—è–∫ –≤–∏–ø–∞–¥–æ–∫ ‚Äî —è–∫—â–æ lecture
    if kind == "lecture":
        await c.message.edit_text(lecture_placeholder_text(), reply_markup=kb_lecture_placeholder())
        await c.answer()
        return

    if not kind or not day:
        await c.message.edit_text("–°–ø–µ—Ä—à—É –æ–±–µ—Ä—ñ—Ç—å —Ç–∏–ø —Ç–∏–∂–Ω—è —Ç–∞ –¥–µ–Ω—å:", reply_markup=kb_main_menu())
        await c.answer()
        return

    lessons = lessons_for(DEFAULT_GROUP, day, kind)
    text = format_details(lessons, f"{DAY_NAMES[day]}", kind)
    await c.message.edit_text(text, reply_markup=kb_day_details())
    await c.answer("–ü–æ–∫–∞–∑—É—é –¥–µ—Ç–∞–ª—ñ")

# ========= –∑–∞–ø—É—Å–∫ =========
if __name__ == "__main__":
    print("Starting bot‚Ä¶")
    executor.start_polling(dp, skip_updates=True)