# bot.py
import json
import os
from pathlib import Path
from typing import Dict, List, Any
from contextlib import suppress
from datetime import datetime, time, timedelta

import pytz
from aiogram import Bot, Dispatcher, types, executor
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.utils.exceptions import MessageNotModified
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from dotenv import load_dotenv

# ------- ENV -------
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É .env")

bot = Bot(BOT_TOKEN, parse_mode=types.ParseMode.HTML)
dp = Dispatcher(bot)

# ------- –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏ -------
DATA_DIR = Path("data")
FILES = {
    "practical": DATA_DIR / "practical.json",
    "lecture": DATA_DIR / "lecture.json",
}
STATE_FILE = DATA_DIR / "state.json"   # {"chat_id": int, "week": "practical"|"lecture", "notify": true}
DAYS = ["–ü–æ–Ω–µ–¥—ñ–ª–æ–∫", "–í—ñ–≤—Ç–æ—Ä–æ–∫", "–°–µ—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä", "–ü º—è—Ç–Ω–∏—Ü—è"]
DAY_TO_CRON = {
    "–ü–æ–Ω–µ–¥—ñ–ª–æ–∫": "mon",
    "–í—ñ–≤—Ç–æ—Ä–æ–∫": "tue",
    "–°–µ—Ä–µ–¥–∞": "wed",
    "–ß–µ—Ç–≤–µ—Ä": "thu",
    "–ü º—è—Ç–Ω–∏—Ü—è": "fri",
}
TZ = pytz.timezone("Europe/Kyiv")

# –°—Ç–∞—Ä—Ç –ø–∞—Ä (–º–∞–≥—ñ—Å—Ç—Ä–∏ 1 –∫—É—Ä—Å)
BELL_START: Dict[int, time] = {
    1: time(9, 0),
    2: time(10, 30),
    3: time(12, 20),
    4: time(13, 50),
    5: time(15, 20),
    6: time(16, 50),
}

# –ö–µ—à —Ä–æ–∑–∫–ª–∞–¥—ñ–≤
SCHEDULES: Dict[str, Any] = {}

# APScheduler
scheduler = AsyncIOScheduler(timezone=TZ)

# ------- –£—Ç–∏–ª—ñ—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å—Ç–∞–Ω—É -------
def load_state() -> Dict[str, Any]:
    if STATE_FILE.exists():
        try:
            return json.loads(STATE_FILE.read_text(encoding="utf-8"))
        except Exception:
            pass
    return {"chat_id": None, "week": "practical", "notify": False}

def save_state(state: Dict[str, Any]) -> None:
    STATE_FILE.parent.mkdir(parents=True, exist_ok=True)
    STATE_FILE.write_text(json.dumps(state, ensure_ascii=False, indent=2), encoding="utf-8")

# ------- –£—Ç–∏–ª—ñ—Ç–∏ —Ä–æ–∑–∫–ª–∞–¥—É -------
def load_json(path: Path) -> Any:
    with path.open("r", encoding="utf-8") as f:
        return json.load(f)

def load_schedules() -> None:
    """–ß–∏—Ç–∞—î –æ–±–∏–¥–≤–∞ —Ñ–∞–π–ª–∏ —Ä–æ–∑–∫–ª–∞–¥—É –≤ –∫–µ—à."""
    global SCHEDULES
    loaded = {}
    for key, path in FILES.items():
        try:
            loaded[key] = load_json(path)
        except Exception as e:
            loaded[key] = {"_message": f"–ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è {path.name}: {e}"}
    SCHEDULES = loaded

def get_day_pairs(week_key: str, day_name: str) -> List[Dict[str, Any]]:
    data = SCHEDULES.get(week_key, {})
    if "_message" in data:
        return []
    return data.get(day_name, [])

def format_pairs_short(pairs: List[Dict[str, Any]]) -> str:
    if not pairs:
        return "‚ùå –ü–∞—Ä –Ω–µ–º–∞—î."
    lines = []
    for p in pairs:
        pair_no = p.get("pair")
        subj = p.get("subject", "‚Äî")
        lines.append(f"‚Ä¢ <b>{pair_no} –ø–∞—Ä–∞</b>: {subj}")
    return "\n".join(lines)

def format_pairs_detailed(pairs: List[Dict[str, Any]]) -> str:
    if not pairs:
        return "‚ùå –ü–∞—Ä –Ω–µ–º–∞—î."
    lines = []
    for p in pairs:
        pair_no = p.get("pair")
        subj = p.get("subject", "‚Äî")
        teacher = p.get("teacher", "‚Äî")
        room = p.get("room", "‚Äî")
        lines.append(
            f"üìö <b>{pair_no} –ø–∞—Ä–∞</b>\n"
            f"   ‚Ä¢ –ü—Ä–µ–¥–º–µ—Ç: <b>{subj}</b>\n"
            f"   ‚Ä¢ –í–∏–∫–ª–∞–¥–∞—á: {teacher}\n"
            f"   ‚Ä¢ –ê—É–¥–∏—Ç–æ—Ä—ñ—è: {room}"
        )
    return "\n\n".join(lines)

def bells_text() -> str:
    return (
        "‚è∞ <b>–†–æ–∑–∫–ª–∞–¥ –¥–∑–≤—ñ–Ω–∫—ñ–≤ (–º–∞–≥—ñ—Å—Ç—Ä–∏ 1 –∫—É—Ä—Å)</b>\n\n"
        "1Ô∏è‚É£ 09:00‚Äì10:20\n"
        "‚Äî –ø–µ—Ä–µ—Ä–≤–∞ 10 —Ö–≤ ‚Äî\n"
        "2Ô∏è‚É£ 10:30‚Äì11:50\n"
        "‚Äî –ø–µ—Ä–µ—Ä–≤–∞ 30 —Ö–≤ ‚Äî\n"
        "3Ô∏è‚É£ 12:20‚Äì13:40\n"
        "‚Äî –ø–µ—Ä–µ—Ä–≤–∞ 10 —Ö–≤ ‚Äî\n"
        "4Ô∏è‚É£ 13:50‚Äì15:10\n"
        "‚Äî –ø–µ—Ä–µ—Ä–≤–∞ 10 —Ö–≤ ‚Äî\n"
        "5Ô∏è‚É£ 15:20‚Äì16:40\n"
        "‚Äî –ø–µ—Ä–µ—Ä–≤–∞ 10 —Ö–≤ ‚Äî\n"
        "6Ô∏è‚É£ 16:50‚Äì18:10"
    )

def today_day_name(dt: datetime) -> str:
    # 0=Mon..6=Sun
    idx = dt.weekday()
    return DAYS[idx] if idx < 5 else "–í–∏—Ö—ñ–¥–Ω–∏–π"

def safe_get_first_pair(pairs: List[Dict[str, Any]]) -> Dict[str, Any] | None:
    if not pairs:
        return None
    return sorted(pairs, key=lambda x: x.get("pair", 99))[0]

# –ë–µ–∑–ø–µ—á–Ω–µ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è (–≥–ª—É—à–∏—Ç—å MessageNotModified)
async def safe_edit(message: types.Message, text: str, **kwargs):
    with suppress(MessageNotModified):
        return await message.edit_text(text, **kwargs)

# ------- –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ -------
def kb_main() -> InlineKeyboardMarkup:
    kb = InlineKeyboardMarkup()
    kb.add(
        InlineKeyboardButton("üìò –õ–µ–∫—Ü—ñ–π–Ω–∏–π —Ç–∏–∂–¥–µ–Ω—å", callback_data="week:lecture"),
        InlineKeyboardButton("üõ†Ô∏è –ü—Ä–∞–∫—Ç–∏—á–Ω–∏–π —Ç–∏–∂–¥–µ–Ω—å", callback_data="week:practical"),
    )
    kb.add(InlineKeyboardButton("‚è∞ –†–æ–∑–∫–ª–∞–¥ –¥–∑–≤—ñ–Ω–∫—ñ–≤", callback_data="bells"))
    kb.add(InlineKeyboardButton("üîî –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è", callback_data="notify:menu"))
    return kb

def kb_home_only() -> InlineKeyboardMarkup:
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("üè† –í –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="home"))
    return kb

def kb_days(week_key: str) -> InlineKeyboardMarkup:
    kb = InlineKeyboardMarkup(row_width=3)
    buttons = [InlineKeyboardButton(d, callback_data=f"day:{week_key}:{d}") for d in DAYS]
    kb.add(*buttons)
    kb.add(InlineKeyboardButton("üè† –í –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="home"))
    return kb

def kb_day_actions(week_key: str, day_name: str) -> InlineKeyboardMarkup:
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("‚ÑπÔ∏è –î–µ—Ç–∞–ª—å–Ω—ñ—à–µ", callback_data=f"detail:{week_key}:{day_name}"))
    kb.add(
        InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –¥–Ω—ñ–≤", callback_data=f"back_days:{week_key}"),
        InlineKeyboardButton("üè† –ú–µ–Ω—é", callback_data="home"),
    )
    return kb

def kb_week_select(prefix: str = "setweek") -> InlineKeyboardMarkup:
    kb = InlineKeyboardMarkup()
    kb.add(
        InlineKeyboardButton("üìò –õ–µ–∫—Ü—ñ–π–Ω–∏–π", callback_data=f"{prefix}:lecture"),
        InlineKeyboardButton("üõ†Ô∏è –ü—Ä–∞–∫—Ç–∏—á–Ω–∏–π", callback_data=f"{prefix}:practical"),
    )
    kb.add(InlineKeyboardButton("üè† –í –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="home"))
    return kb

def kb_notify_menu(state: Dict[str, Any]) -> InlineKeyboardMarkup:
    enabled = state.get("notify", False)
    kb = InlineKeyboardMarkup()
    if enabled:
        kb.add(InlineKeyboardButton("üîï –í–∏–º–∫–Ω—É—Ç–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è", callback_data="notify:off"))
    else:
        kb.add(InlineKeyboardButton("üîî –£–≤—ñ–º–∫–Ω—É—Ç–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è", callback_data="notify:on"))
    kb.add(InlineKeyboardButton("üóì –û–±—Ä–∞—Ç–∏ —Ç–∏–∂–¥–µ–Ω—å", callback_data="setweek:menu"))
    kb.add(InlineKeyboardButton("üè† –í –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="home"))
    return kb

# ------- –ü–ª–∞–Ω—É–≤–∞–Ω–Ω—è (APScheduler) -------
def remove_jobs_for_chat(chat_id: int):
    for job in scheduler.get_jobs():
        if job.id.startswith(f"{chat_id}:"):
            scheduler.remove_job(job.id)

def schedule_static_jobs_for_chat(chat_id: int):
    """
    –°—Ç–∞–≤–∏–º–æ:
      - —â–æ–¥–µ–Ω–Ω–æ (–ø–Ω-–ø—Ç) —Ç—Ä–∏–≥–µ—Ä–∏ –Ω–∞ 5 —Ö–≤ –¥–æ –∫–æ–∂–Ω–æ—ó –ø–∞—Ä–∏ (1..6)
      - —â–æ–¥–µ–Ω–Ω–æ (–ø–Ω-–ø—Ç) —Ç—Ä–∏–≥–µ—Ä –∑–∞ 1 –≥–æ–¥ –¥–æ –ü–ï–†–®–û–á –ø–∞—Ä–∏
      - —â–æ–Ω–µ–¥—ñ–ª—ñ 18:00 ‚Äî –∑–∞–ø–∏—Ç–∞—Ç–∏ —Ç–∏–∂–¥–µ–Ω—å
    –õ–æ–≥—ñ–∫–∞ ‚Äú—è–∫–∞ –ø–∞—Ä–∞ —î —Å—å–æ–≥–æ–¥–Ω—ñ‚Äù –≤–∏–∑–Ω–∞—á–∞—î—Ç—å—Å—è –ø—ñ–¥ —á–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è ‚Äî –∑–∞ –∞–∫—Ç—É–∞–ª—å–Ω–∏–º state.week.
    """
    # 5 —Ö–≤ –¥–æ –∫–æ–∂–Ω–æ—ó –ø–∞—Ä–∏ (–ø–Ω-–ø—Ç)
    for day_name, cron_day in DAY_TO_CRON.items():
        for pair_no, t in BELL_START.items():
            h, m = t.hour, t.minute
            # 5 —Ö–≤ –¥–æ –ø–æ—á–∞—Ç–∫—É
            send_m = (datetime(2000,1,1,h,m) - timedelta(minutes=5)).minute
            send_h = (datetime(2000,1,1,h,m) - timedelta(minutes=5)).hour
            job_id = f"{chat_id}:warn5m:{cron_day}:{pair_no}"
            scheduler.add_job(
                notify_5min_before_pair,
                trigger="cron",
                id=job_id,
                day_of_week=cron_day,
                hour=send_h,
                minute=send_m,
                args=[chat_id, pair_no],
                replace_existing=True,
                misfire_grace_time=60,
            )
        # 1 –≥–æ–¥–∏–Ω–∞ –¥–æ –ø–µ—Ä—à–æ—ó –ø–∞—Ä–∏ ‚Äî –ø–æ—Å—Ç–∞–≤–∏–º–æ –Ω–∞ —Ñ—ñ–∫—Å–æ–≤–∞–Ω–∏–π —á–∞—Å 08:00 (–±–æ –ø–µ—Ä—à–∞ –ø–∞—Ä–∞ 09:00)
        job_id = f"{chat_id}:warn1h:{cron_day}"
        scheduler.add_job(
            notify_1h_before_first_pair,
            trigger="cron",
            id=job_id,
            day_of_week=cron_day,
            hour=8,
            minute=0,
            args=[chat_id],
            replace_existing=True,
            misfire_grace_time=300,
        )

    # –ù–µ–¥—ñ–ª—è 18:00 ‚Äî –∑–∞–ø–∏—Ç–∞—Ç–∏ —Ç–∏–∂–¥–µ–Ω—å
    scheduler.add_job(
        ask_week_on_sunday,
        trigger="cron",
        id=f"{chat_id}:askweek:sun",
        day_of_week="sun",
        hour=18,
        minute=0,
        args=[chat_id],
        replace_existing=True,
        misfire_grace_time=300,
    )

async def notify_1h_before_first_pair(chat_id: int):
    state = load_state()
    if not state.get("notify") or state.get("chat_id") != chat_id:
        return
    # –°—å–æ–≥–æ–¥–Ω—ñ—à–Ω—ñ–π –¥–µ–Ω—å
    now = datetime.now(TZ)
    day_name = today_day_name(now)
    if day_name not in DAYS:
        return
    pairs = get_day_pairs(state.get("week", "practical"), day_name)
    first_p = safe_get_first_pair(pairs)
    if not first_p:
        return
    subj = first_p.get("subject", "‚Äî")
    room = first_p.get("room", "‚Äî")
    pair_no = first_p.get("pair")
    txt = (
        f"‚è∞ <b>–ß–µ—Ä–µ–∑ 1 –≥–æ–¥–∏–Ω—É</b> –ø–æ—á–Ω–µ—Ç—å—Å—è –ø–∞—Ä–∞ {pair_no} ‚Äî <b>{subj}</b>\n"
        f"üè´ –ê—É–¥–∏—Ç–æ—Ä—ñ—è: {room}"
    )
    try:
        await bot.send_message(chat_id, txt)
    except Exception:
        pass

async def notify_5min_before_pair(chat_id: int, pair_no: int):
    state = load_state()
    if not state.get("notify") or state.get("chat_id") != chat_id:
        return
    now = datetime.now(TZ)
    day_name = today_day_name(now)
    if day_name not in DAYS:
        return
    pairs = get_day_pairs(state.get("week", "practical"), day_name)
    target = [p for p in pairs if p.get("pair") == pair_no]
    if not target:
        return
    p = target[0]
    subj = p.get("subject", "‚Äî")
    room = p.get("room", "‚Äî")
    txt = (
        f"‚è≥ <b>–ó–∞ 5 —Ö–≤</b> –ø–æ—á–Ω–µ—Ç—å—Å—è –ø–∞—Ä–∞ {pair_no} ‚Äî <b>{subj}</b>\n"
        f"üè´ –ê—É–¥–∏—Ç–æ—Ä—ñ—è: {room}"
    )
    try:
        await bot.send_message(chat_id, txt)
    except Exception:
        pass

async def ask_week_on_sunday(chat_id: int):
    state = load_state()
    if state.get("chat_id") != chat_id:
        return
    txt = (
        "üóì <b>–í–∏–±—ñ—Ä —Ç–∏–∂–Ω—è –Ω–∞ –Ω–∞—Å—Ç—É–ø–Ω–∏–π —Ü–∏–∫–ª</b>\n"
        "–û–±–µ—Ä—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, —è–∫–∏–π —Ç–∏–∂–¥–µ–Ω—å –∞–∫—Ç—É–∞–ª—å–Ω–∏–π —ñ–∑ –ø–æ–Ω–µ–¥—ñ–ª–∫–∞:"
    )
    try:
        await bot.send_message(chat_id, txt, reply_markup=kb_week_select(prefix="setweek"))
    except Exception:
        pass

def reschedule_for_chat(chat_id: int, ensure_started=True):
    remove_jobs_for_chat(chat_id)
    schedule_static_jobs_for_chat(chat_id)
    if ensure_started and not scheduler.running:
        scheduler.start()

# ------- –ö–æ–º–∞–Ω–¥–∏ -------
@dp.message_handler(commands=["start"])
async def start(m: types.Message):
    state = load_state()
    state["chat_id"] = m.chat.id
    save_state(state)
    # –≥–∞—Ä–∞–Ω—Ç—É—î–º–æ —Ä–æ–∑–∫–ª–∞–¥ –∑–∞–¥–∞—á
    reschedule_for_chat(m.chat.id)
    await m.answer("–ü—Ä–∏–≤—ñ—Ç! üëã –û–±–µ—Ä–∏ —Ä–µ–∂–∏–º:", reply_markup=kb_main())

@dp.message_handler(commands=["bells"])
async def cmd_bells(m: types.Message):
    await m.answer(bells_text(), reply_markup=kb_home_only(), disable_web_page_preview=True)

@dp.message_handler(commands=["reload"])
async def cmd_reload(m: types.Message):
    load_schedules()
    await m.answer("üîÑ –†–æ–∑–∫–ª–∞–¥–∏ –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –∑ —Ñ–∞–π–ª—ñ–≤.")

@dp.message_handler(commands=["notify_on"])
async def cmd_notify_on(m: types.Message):
    state = load_state()
    state["chat_id"] = m.chat.id
    state["notify"] = True
    save_state(state)
    reschedule_for_chat(m.chat.id)
    await m.answer("üîî –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è —É–≤—ñ–º–∫–Ω–µ–Ω–æ.\n"
                   "‚Ä¢ –ó–∞ 1 –≥–æ–¥–∏–Ω—É –¥–æ –ø–µ—Ä—à–æ—ó –ø–∞—Ä–∏ –¥–Ω—è\n"
                   "‚Ä¢ –ó–∞ 5 —Ö–≤ –¥–æ –∫–æ–∂–Ω–æ—ó –ø–∞—Ä–∏")

@dp.message_handler(commands=["notify_off"])
async def cmd_notify_off(m: types.Message):
    state = load_state()
    state["notify"] = False
    save_state(state)
    await m.answer("üîï –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –≤–∏–º–∫–Ω–µ–Ω–æ.")

@dp.message_handler(commands=["setweek"])
async def cmd_setweek(m: types.Message):
    await m.answer("–û–±–µ—Ä—ñ—Ç—å –∞–∫—Ç–∏–≤–Ω–∏–π —Ç–∏–∂–¥–µ–Ω—å:", reply_markup=kb_week_select())

@dp.message_handler(commands=["weekstatus"])
async def cmd_weekstatus(m: types.Message):
    state = load_state()
    cur = state.get("week", "practical")
    flag = "—É–≤—ñ–º–∫–Ω–µ–Ω—ñ" if state.get("notify") else "–≤–∏–º–∫–Ω–µ–Ω—ñ"
    await m.answer(f"‚ÑπÔ∏è –ê–∫—Ç–∏–≤–Ω–∏–π —Ç–∏–∂–¥–µ–Ω—å: <b>{'–ü—Ä–∞–∫—Ç–∏—á–Ω–∏–π' if cur=='practical' else '–õ–µ–∫—Ü—ñ–π–Ω–∏–π'}</b>\n"
                   f"üîî –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è: {flag}")

# ------- Callback-–∏ (–Ω–∞–≤—ñ–≥–∞—Ü—ñ—è) -------
@dp.callback_query_handler(lambda c: c.data == "home")
async def cb_home(c: CallbackQuery):
    await safe_edit(c.message, "–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:", reply_markup=kb_main())
    await c.answer("–í–∂–µ —Ç—É—Ç ‚úÖ")

@dp.callback_query_handler(lambda c: c.data == "bells")
async def cb_bells(c: CallbackQuery):
    await safe_edit(c.message, bells_text(), reply_markup=kb_home_only(), disable_web_page_preview=True)
    await c.answer("–†–æ–∑–∫–ª–∞–¥ –¥–∑–≤—ñ–Ω–∫—ñ–≤ –≤—ñ–¥–∫—Ä–∏—Ç–∏–π üîî")

@dp.callback_query_handler(lambda c: c.data.startswith("week:"))
async def cb_week(c: CallbackQuery):
    _, week_key = c.data.split(":", 1)
    data = SCHEDULES.get(week_key, {})
    if "_message" in data:
        await safe_edit(c.message, f"‚ÑπÔ∏è {data['_message']}", reply_markup=kb_home_only())
        await c.answer("–ù–∞—Ä–∞–∑—ñ –ª–µ–∫—Ü—ñ–π–Ω–∏–π —Ä–æ–∑–∫–ª–∞–¥ –≤—ñ–¥—Å—É—Ç–Ω—ñ–π ‚ÑπÔ∏è")
    else:
        title = "üõ†Ô∏è –ü—Ä–∞–∫—Ç–∏—á–Ω–∏–π —Ç–∏–∂–¥–µ–Ω—å" if week_key == "practical" else "üìò –õ–µ–∫—Ü—ñ–π–Ω–∏–π —Ç–∏–∂–¥–µ–Ω—å"
        await safe_edit(c.message, f"{title}\n\n–û–±–µ—Ä—ñ—Ç—å –¥–µ–Ω—å:", reply_markup=kb_days(week_key))
        await c.answer()

@dp.callback_query_handler(lambda c: c.data.startswith("back_days:"))
async def cb_back_days(c: CallbackQuery):
    _, week_key = c.data.split(":", 1)
    title = "üõ†Ô∏è –ü—Ä–∞–∫—Ç–∏—á–Ω–∏–π —Ç–∏–∂–¥–µ–Ω—å" if week_key == "practical" else "üìò –õ–µ–∫—Ü—ñ–π–Ω–∏–π —Ç–∏–∂–¥–µ–Ω—å"
    await safe_edit(c.message, f"{title}\n\n–û–±–µ—Ä—ñ—Ç—å –¥–µ–Ω—å:", reply_markup=kb_days(week_key))
    await c.answer("–ü–æ–≤–µ—Ä–Ω—É–≤ –¥–æ —Å–ø–∏—Å–∫—É –¥–Ω—ñ–≤ ‚Ü©Ô∏è")

@dp.callback_query_handler(lambda c: c.data.startswith("day:"))
async def cb_day(c: CallbackQuery):
    _, week_key, day_name = c.data.split(":", 2)
    pairs = get_day_pairs(week_key, day_name)
    text = f"üìÖ <b>{day_name}</b>\n\n{format_pairs_short(pairs)}"
    await safe_edit(c.message, text, reply_markup=kb_day_actions(week_key, day_name))
    await c.answer()

@dp.callback_query_handler(lambda c: c.data.startswith("detail:"))
async def cb_detail(c: CallbackQuery):
    _, week_key, day_name = c.data.split(":", 2)
    pairs = get_day_pairs(week_key, day_name)
    text = f"üìÖ <b>{day_name}</b>\n\n{format_pairs_detailed(pairs)}"
    kb = InlineKeyboardMarkup()
    kb.add(
        InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –¥–Ω—ñ–≤", callback_data=f"back_days:{week_key}"),
        InlineKeyboardButton("üè† –ú–µ–Ω—é", callback_data="home"),
    )
    await safe_edit(c.message, text, reply_markup=kb)
    await c.answer()

# ------- Callback-–∏ (setweek / notify) -------
@dp.callback_query_handler(lambda c: c.data == "setweek:menu")
async def cb_setweek_menu(c: CallbackQuery):
    await safe_edit(c.message, "–û–±–µ—Ä—ñ—Ç—å –∞–∫—Ç–∏–≤–Ω–∏–π —Ç–∏–∂–¥–µ–Ω—å:", reply_markup=kb_week_select())
    await c.answer()

@dp.callback_query_handler(lambda c: c.data.startswith("setweek:"))
async def cb_setweek(c: CallbackQuery):
    _, week_key = c.data.split(":", 1)
    if week_key not in ("lecture", "practical"):
        await c.answer("–ù–µ–≤—ñ–¥–æ–º–∏–π —Ç–∏–ø —Ç–∏–∂–Ω—è", show_alert=True)
        return
    state = load_state()
    state["week"] = week_key
    # —è–∫—â–æ —â–µ –Ω–µ –∑–∞–ø–∏—Å–∞–Ω–∏–π chat_id ‚Äî –∑–∞–ø–∏—à–µ–º–æ
    state["chat_id"] = state.get("chat_id") or c.message.chat.id
    save_state(state)
    # –ü–µ—Ä–µ–ø–ª–∞–Ω—É–≤–∞—Ç–∏ –¥–∂–æ–±–∏ (—á–∞—Å–∏ —Ç—ñ —Å–∞–º—ñ, –ª–æ–≥—ñ–∫–∞ —á–∏—Ç–∞—î –∞–∫—Ç—É–∞–ª—å–Ω–∏–π state)
    reschedule_for_chat(state["chat_id"])
    await safe_edit(
        c.message,
        f"‚úÖ –¢–∏–∂–¥–µ–Ω—å –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: <b>{'–õ–µ–∫—Ü—ñ–π–Ω–∏–π' if week_key=='lecture' else '–ü—Ä–∞–∫—Ç–∏—á–Ω–∏–π'}</b>",
        reply_markup=kb_main()
    )
    await c.answer("–ó–±–µ—Ä–µ–∂–µ–Ω–æ ‚úÖ")

@dp.callback_query_handler(lambda c: c.data == "notify:menu")
async def cb_notify_menu(c: CallbackQuery):
    state = load_state()
    await safe_edit(c.message, "–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å:", reply_markup=kb_notify_menu(state))
    await c.answer()

@dp.callback_query_handler(lambda c: c.data == "notify:on")
async def cb_notify_on(c: CallbackQuery):
    state = load_state()
    state["chat_id"] = c.message.chat.id
    state["notify"] = True
    save_state(state)
    reschedule_for_chat(state["chat_id"])
    await safe_edit(c.message, "üîî –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è —É–≤—ñ–º–∫–Ω–µ–Ω–æ.", reply_markup=kb_notify_menu(state))
    await c.answer("–£–≤—ñ–º–∫–Ω–µ–Ω–æ üîî")

@dp.callback_query_handler(lambda c: c.data == "notify:off")
async def cb_notify_off(c: CallbackQuery):
    state = load_state()
    state["notify"] = False
    save_state(state)
    await safe_edit(c.message, "üîï –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –≤–∏–º–∫–Ω–µ–Ω–æ.", reply_markup=kb_notify_menu(state))
    await c.answer("–í–∏–º–∫–Ω–µ–Ω–æ üîï")

# ------- –°—Ç–∞—Ä—Ç -------
if __name__ == "__main__":
    load_schedules()
    # –ü—ñ–¥–Ω—ñ–º–∞—î–º–æ scheduler –æ–¥—Ä–∞–∑—É, —ñ —è–∫—â–æ –≤ state –≤–∂–µ —î chat_id+notify ‚Äî —Ä–æ–∑–∫–ª–∞–¥–µ–º–æ –∑–∞–¥–∞—á—ñ
    st = load_state()
    if st.get("chat_id"):
        reschedule_for_chat(st["chat_id"], ensure_started=False)
    if not scheduler.running:
        scheduler.start()
    print("Starting bot‚Ä¶")
    executor.start_polling(dp, skip_updates=True)
