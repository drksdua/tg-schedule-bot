# bot.py
import json
import os
from pathlib import Path
from typing import Dict, List, Any
from contextlib import suppress

from aiogram import Bot, Dispatcher, types, executor
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.utils.exceptions import MessageNotModified
from dotenv import load_dotenv

# ------- ENV -------
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É .env")

bot = Bot(BOT_TOKEN, parse_mode=types.ParseMode.HTML)
dp = Dispatcher(bot)

# ------- –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏ -------
DATA_DIR = Path("data")
FILES = {
    "practical": DATA_DIR / "practical.json",
    "lecture": DATA_DIR / "lecture.json",
}
DAYS = ["–ü–æ–Ω–µ–¥—ñ–ª–æ–∫", "–í—ñ–≤—Ç–æ—Ä–æ–∫", "–°–µ—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä", "–ü º—è—Ç–Ω–∏—Ü—è"]

# –ö–µ—à —Ä–æ–∑–∫–ª–∞–¥—ñ–≤
SCHEDULES: Dict[str, Any] = {}

# ------- –£—Ç–∏–ª—ñ—Ç–∏ -------
def load_json(path: Path) -> Any:
    with path.open("r", encoding="utf-8") as f:
        return json.load(f)

def load_schedules() -> None:
    """–ß–∏—Ç–∞—î –æ–±–∏–¥–≤–∞ —Ñ–∞–π–ª–∏ —Ä–æ–∑–∫–ª–∞–¥—É –≤ –∫–µ—à."""
    global SCHEDULES
    loaded = {}
    for key, path in FILES.items():
        try:
            loaded[key] = load_json(path)
        except Exception as e:
            loaded[key] = {"_message": f"–ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è {path.name}: {e}"}
    SCHEDULES = loaded

def get_day_pairs(week_key: str, day_name: str) -> List[Dict[str, Any]]:
    data = SCHEDULES.get(week_key, {})
    if "_message" in data:
        return []
    return data.get(day_name, [])

def format_pairs_short(pairs: List[Dict[str, Any]]) -> str:
    if not pairs:
        return "‚ùå –ü–∞—Ä –Ω–µ–º–∞—î."
    lines = []
    for p in pairs:
        pair_no = p.get("pair")
        subj = p.get("subject", "‚Äî")
        lines.append(f"‚Ä¢ <b>{pair_no} –ø–∞—Ä–∞</b>: {subj}")
    return "\n".join(lines)

def format_pairs_detailed(pairs: List[Dict[str, Any]]) -> str:
    if not pairs:
        return "‚ùå –ü–∞—Ä –Ω–µ–º–∞—î."
    lines = []
    for p in pairs:
        pair_no = p.get("pair")
        subj = p.get("subject", "‚Äî")
        teacher = p.get("teacher", "‚Äî")
        room = p.get("room", "‚Äî")
        lines.append(
            f"üìö <b>{pair_no} –ø–∞—Ä–∞</b>\n"
            f"   ‚Ä¢ –ü—Ä–µ–¥–º–µ—Ç: <b>{subj}</b>\n"
            f"   ‚Ä¢ –í–∏–∫–ª–∞–¥–∞—á: {teacher}\n"
            f"   ‚Ä¢ –ê—É–¥–∏—Ç–æ—Ä—ñ—è: {room}"
        )
    return "\n\n".join(lines)

def bells_text() -> str:
    # –ú–∞–≥—ñ—Å—Ç—Ä–∏ 1 –∫—É—Ä—Å (–ø—Ä–∞–≤–∞ –∫–æ–ª–æ–Ω–∫–∞ —Ç–≤–æ–≥–æ —Ñ–æ—Ç–æ)
    return (
        "‚è∞ <b>–†–æ–∑–∫–ª–∞–¥ –¥–∑–≤—ñ–Ω–∫—ñ–≤ (–º–∞–≥—ñ—Å—Ç—Ä–∏ 1 –∫—É—Ä—Å)</b>\n\n"
        "1Ô∏è‚É£ 09:00‚Äì10:20\n"
        "‚Äî –ø–µ—Ä–µ—Ä–≤–∞ 10 —Ö–≤ ‚Äî\n"
        "2Ô∏è‚É£ 10:30‚Äì11:50\n"
        "‚Äî –ø–µ—Ä–µ—Ä–≤–∞ 30 —Ö–≤ ‚Äî\n"
        "3Ô∏è‚É£ 12:20‚Äì13:40\n"
        "‚Äî –ø–µ—Ä–µ—Ä–≤–∞ 10 —Ö–≤ ‚Äî\n"
        "4Ô∏è‚É£ 13:50‚Äì15:10\n"
        "‚Äî –ø–µ—Ä–µ—Ä–≤–∞ 10 —Ö–≤ ‚Äî\n"
        "5Ô∏è‚É£ 15:20‚Äì16:40\n"
        "‚Äî –ø–µ—Ä–µ—Ä–≤–∞ 10 —Ö–≤ ‚Äî\n"
        "6Ô∏è‚É£ 16:50‚Äì18:10"
    )

# –ë–µ–∑–ø–µ—á–Ω–µ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è (–≥–ª—É—à–∏—Ç—å MessageNotModified)
async def safe_edit(message: types.Message, text: str, **kwargs):
    with suppress(MessageNotModified):
        return await message.edit_text(text, **kwargs)

# ------- –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ -------
def kb_main() -> InlineKeyboardMarkup:
    kb = InlineKeyboardMarkup()
    kb.add(
        InlineKeyboardButton("üìò –õ–µ–∫—Ü—ñ–π–Ω–∏–π —Ç–∏–∂–¥–µ–Ω—å", callback_data="week:lecture"),
        InlineKeyboardButton("üõ†Ô∏è –ü—Ä–∞–∫—Ç–∏—á–Ω–∏–π —Ç–∏–∂–¥–µ–Ω—å", callback_data="week:practical"),
    )
    kb.add(InlineKeyboardButton("‚è∞ –†–æ–∑–∫–ª–∞–¥ –¥–∑–≤—ñ–Ω–∫—ñ–≤", callback_data="bells"))
    return kb

def kb_home_only() -> InlineKeyboardMarkup:
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("üè† –í –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="home"))
    return kb

def kb_days(week_key: str) -> InlineKeyboardMarkup:
    kb = InlineKeyboardMarkup(row_width=3)
    buttons = [InlineKeyboardButton(d, callback_data=f"day:{week_key}:{d}") for d in DAYS]
    kb.add(*buttons)
    kb.add(InlineKeyboardButton("üè† –í –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="home"))
    return kb

def kb_day_actions(week_key: str, day_name: str) -> InlineKeyboardMarkup:
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("‚ÑπÔ∏è –î–µ—Ç–∞–ª—å–Ω—ñ—à–µ", callback_data=f"detail:{week_key}:{day_name}"))
    kb.add(
        InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –¥–Ω—ñ–≤", callback_data=f"back_days:{week_key}"),
        InlineKeyboardButton("üè† –ú–µ–Ω—é", callback_data="home"),
    )
    return kb

# ------- –ö–æ–º–∞–Ω–¥–∏ -------
@dp.message_handler(commands=["start"])
async def start(m: types.Message):
    await m.answer("–ü—Ä–∏–≤—ñ—Ç! üëã –û–±–µ—Ä–∏ —Ä–µ–∂–∏–º:", reply_markup=kb_main())

@dp.message_handler(commands=["bells"])
async def cmd_bells(m: types.Message):
    await m.answer(bells_text(), reply_markup=kb_home_only(), disable_web_page_preview=True)

@dp.message_handler(commands=["reload"])
async def cmd_reload(m: types.Message):
    load_schedules()
    await m.answer("üîÑ –†–æ–∑–∫–ª–∞–¥–∏ –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –∑ —Ñ–∞–π–ª—ñ–≤.")

# ------- Callback-–∏ -------
@dp.callback_query_handler(lambda c: c.data == "home")
async def cb_home(c: CallbackQuery):
    await safe_edit(c.message, "–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:", reply_markup=kb_main())
    await c.answer("–í–∂–µ —Ç—É—Ç ‚úÖ")

@dp.callback_query_handler(lambda c: c.data == "bells")
async def cb_bells(c: CallbackQuery):
    await safe_edit(c.message, bells_text(), reply_markup=kb_home_only(), disable_web_page_preview=True)
    await c.answer("–†–æ–∑–∫–ª–∞–¥ –¥–∑–≤—ñ–Ω–∫—ñ–≤ –≤—ñ–¥–∫—Ä–∏—Ç–∏–π üîî")

@dp.callback_query_handler(lambda c: c.data.startswith("week:"))
async def cb_week(c: CallbackQuery):
    _, week_key = c.data.split(":", 1)
    data = SCHEDULES.get(week_key, {})
    if "_message" in data:
        await safe_edit(
            c.message,
            f"‚ÑπÔ∏è {data['_message']}",
            reply_markup=kb_home_only()
        )
        await c.answer("–ù–∞—Ä–∞–∑—ñ –ª–µ–∫—Ü—ñ–π–Ω–∏–π —Ä–æ–∑–∫–ª–∞–¥ –≤—ñ–¥—Å—É—Ç–Ω—ñ–π ‚ÑπÔ∏è")
    else:
        title = "üõ†Ô∏è –ü—Ä–∞–∫—Ç–∏—á–Ω–∏–π —Ç–∏–∂–¥–µ–Ω—å" if week_key == "practical" else "üìò –õ–µ–∫—Ü—ñ–π–Ω–∏–π —Ç–∏–∂–¥–µ–Ω—å"
        await safe_edit(c.message, f"{title}\n\n–û–±–µ—Ä—ñ—Ç—å –¥–µ–Ω—å:", reply_markup=kb_days(week_key))
        await c.answer()

@dp.callback_query_handler(lambda c: c.data.startswith("back_days:"))
async def cb_back_days(c: CallbackQuery):
    _, week_key = c.data.split(":", 1)
    title = "üõ†Ô∏è –ü—Ä–∞–∫—Ç–∏—á–Ω–∏–π —Ç–∏–∂–¥–µ–Ω—å" if week_key == "practical" else "üìò –õ–µ–∫—Ü—ñ–π–Ω–∏–π —Ç–∏–∂–¥–µ–Ω—å"
    await safe_edit(c.message, f"{title}\n\n–û–±–µ—Ä—ñ—Ç—å –¥–µ–Ω—å:", reply_markup=kb_days(week_key))
    await c.answer("–ü–æ–≤–µ—Ä–Ω—É–≤ –¥–æ —Å–ø–∏—Å–∫—É –¥–Ω—ñ–≤ ‚Ü©Ô∏è")

@dp.callback_query_handler(lambda c: c.data.startswith("day:"))
async def cb_day(c: CallbackQuery):
    _, week_key, day_name = c.data.split(":", 2)
    pairs = get_day_pairs(week_key, day_name)
    text = f"üìÖ <b>{day_name}</b>\n\n{format_pairs_short(pairs)}"
    await safe_edit(c.message, text, reply_markup=kb_day_actions(week_key, day_name))
    await c.answer()

@dp.callback_query_handler(lambda c: c.data.startswith("detail:"))
async def cb_detail(c: CallbackQuery):
    _, week_key, day_name = c.data.split(":", 2)
    pairs = get_day_pairs(week_key, day_name)
    text = f"üìÖ <b>{day_name}</b>\n\n{format_pairs_detailed(pairs)}"
    kb = InlineKeyboardMarkup()
    kb.add(
        InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –¥–Ω—ñ–≤", callback_data=f"back_days:{week_key}"),
        InlineKeyboardButton("üè† –ú–µ–Ω—é", callback_data="home"),
    )
    await safe_edit(c.message, text, reply_markup=kb)
    await c.answer()

# ------- –°—Ç–∞—Ä—Ç -------
if __name__ == "__main__":
    load_schedules()
    print("Starting bot‚Ä¶")
    executor.start_polling(dp, skip_updates=True)
